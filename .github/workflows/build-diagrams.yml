name: Build D2 Diagrams

on:
  push:
    branches: [ main ]
    paths:
      - 'mydocs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'mydocs/**'

permissions:
  contents: write

jobs:
  build-diagrams:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install D2
      run: |
        curl -fsSL https://d2lang.com/install.sh | sh -s --
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        ~/.local/bin/d2 --version
        
    - name: Create output directory
      run: mkdir -p mydocs/output
      
    - name: Build diagrams
      run: |
        cd mydocs
        chmod +x build.sh
        ./build.sh
        
    - name: Check for build errors
      run: |
        if [ -f mydocs/error.log ] && grep -q "\[ERROR\]" mydocs/error.log; then
          echo "Build errors found:"
          cat mydocs/error.log
          exit 1
        fi
        
    - name: Display build results
      run: |
        echo "Generated files:"
        ls -la mydocs/output/ || echo "No output files generated"
        echo "File count: $(ls mydocs/output/ 2>/dev/null | wc -l)"
        
    - name: Configure Git with SSH signing
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Setup SSH key for signing
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
        
        # Create allowed signers file  
        echo "11855163+norandom@users.noreply.github.com $(cat ~/.ssh/id_rsa.pub)" > ~/.ssh/allowed_signers
        
        # Configure git
        git config --local user.email "11855163+norandom@users.noreply.github.com"
        git config --local user.name "GitHub Action"
        git config --local gpg.format ssh
        git config --local user.signingkey ~/.ssh/id_rsa.pub
        git config --local commit.gpgsign true
        git config --local gpg.ssh.allowedSignersFile ~/.ssh/allowed_signers
        
        # Debug: Show git config
        echo "Git configuration:"
        git config --list | grep -E "(user\.|gpg\.|signing)"
        
        # Test SSH key
        echo "Testing SSH key:"
        ssh-keygen -l -f ~/.ssh/id_rsa.pub
        
        # Show allowed signers file
        echo "Allowed signers file:"
        cat ~/.ssh/allowed_signers
        
    - name: Commit and push built diagrams
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git add mydocs/output/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          echo "Creating signed commit..."
          
          # Debug: Check git signing config before commit
          echo "Final git config check:"
          git config --get-regexp "^(user|gpg|commit)" || true
          
          git commit -S -m "Auto-build D2 diagrams

          Generated from D2 source files in mydocs/
          
          ðŸ¤– Generated by GitHub Actions
          
          Files updated:
          $(ls mydocs/output/ 2>/dev/null | sed 's/^/- /' || echo '- No files generated')"
          
          # Debug: Verify the commit was signed
          echo "Verifying commit signature:"
          git log --show-signature -1 --pretty=format:"%h %s" || true
          
          git push
        fi
        
    - name: Upload diagrams as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: d2-diagrams
        path: mydocs/output/
        retention-days: 30
        
    - name: Comment on PR with diagram links
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Check if output directory exists and has files
          const outputDir = 'mydocs/output';
          if (!fs.existsSync(outputDir)) {
            console.log('No output directory found');
            return;
          }
          
          const files = fs.readdirSync(outputDir);
          if (files.length === 0) {
            console.log('No diagram files generated');
            return;
          }
          
          const diagrams = files.filter(f => f.endsWith('.png') || f.endsWith('.svg'));
          
          if (diagrams.length > 0) {
            const body = `## ðŸ“Š Generated Diagrams
            
            The following diagrams were generated from your D2 source files:
            
            ${diagrams.map(file => `- \`${file}\``).join('\n')}
            
            **Download all diagrams**: The diagrams are available as build artifacts.
            
            **To view locally**: Run \`cd mydocs && ./build.sh\` after merging.
            
            ---
            ðŸ¤– *Auto-generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }