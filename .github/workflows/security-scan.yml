name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scanning

    - name: Run TruffleHog
      continue-on-error: true
      run: |
        # Install TruffleHog to local directory
        mkdir -p ./bin
        DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest" | grep "browser_download_url.*linux-amd64.tar.gz" | cut -d '"' -f 4)
        curl -sSL "$DOWNLOAD_URL" | tar -xz -C ./bin
        chmod +x ./bin/trufflehog
        
        # Run scan and create SARIF
        ./bin/trufflehog filesystem ./ --only-verified --json > trufflehog-output.json || true
        
        # Convert to SARIF format
        python3 << 'EOF'
        import json
        
        def convert_trufflehog_to_sarif():
            try:
                with open('trufflehog-output.json', 'r') as f:
                    trufflehog_results = [json.loads(line) for line in f if line.strip()]
            except FileNotFoundError:
                trufflehog_results = []
            
            sarif = {
                "version": "2.1.0",
                "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                "runs": [{
                    "tool": {
                        "driver": {
                            "name": "TruffleHog",
                            "version": "3.0.0",
                            "informationUri": "https://trufflesecurity.com/trufflehog",
                            "rules": []
                        }
                    },
                    "results": []
                }]
            }
            
            for result in trufflehog_results:
                if result.get('Verified', False):
                    detector_name = result.get('DetectorName', 'unknown')
                    source_file = result.get('SourceMetadata', {}).get('Data', {}).get('Filesystem', {}).get('file', 'unknown')
                    
                    # Add rule if not seen
                    rule_id = f"trufflehog/{detector_name.lower()}"
                    if not any(rule['id'] == rule_id for rule in sarif["runs"][0]["tool"]["driver"]["rules"]):
                        sarif["runs"][0]["tool"]["driver"]["rules"].append({
                            "id": rule_id,
                            "name": detector_name,
                            "shortDescription": {"text": f"Potential {detector_name} secret detected"},
                            "defaultConfiguration": {"level": "error"}
                        })
                    
                    sarif["runs"][0]["results"].append({
                        "ruleId": rule_id,
                        "level": "error",
                        "message": {"text": f"Verified {detector_name} secret found"},
                        "locations": [{
                            "physicalLocation": {
                                "artifactLocation": {"uri": source_file},
                                "region": {"startLine": 1}
                            }
                        }]
                    })
            
            with open('trufflehog-results.sarif', 'w') as f:
                json.dump(sarif, f, indent=2)
                
            print(f"Converted {len(sarif['runs'][0]['results'])} TruffleHog findings to SARIF")
        
        convert_trufflehog_to_sarif()
        EOF
        
    - name: Upload TruffleHog SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trufflehog-results.sarif
        category: "TruffleHog Secret Scan"
        
    - name: Upload TruffleHog Results as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trufflehog-results
        path: trufflehog-results.sarif
        retention-days: 30

  kubernetes-security:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Find YAML files for Kubesec
      run: find apps/ -name "*.yaml" -o -name "*.yml" > yaml-files.txt
      
    - name: Run Kubesec Scan
      continue-on-error: true
      run: |
        if [ -s yaml-files.txt ]; then
          # Install kubesec
          DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" | grep "browser_download_url.*linux-amd64" | cut -d '"' -f 4)
          curl -sSL "$DOWNLOAD_URL" -o kubesec
          chmod +x kubesec
          
          # Initialize SARIF structure
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"kubesec","version":"2.11.0","informationUri":"https://kubesec.io/","rules":[]}},"results":[]}]}' > kubesec-results.sarif
          
          # Scan files and convert to SARIF
          python3 << 'PYTHON_EOF'
import json
import subprocess
import os

def run_kubesec_and_convert():
    sarif_results = []
    
    with open('yaml-files.txt', 'r') as f:
        files = [line.strip() for line in f if line.strip()]
    
    for file_path in files:
        try:
            print(f"Scanning: {file_path}")
            result = subprocess.run(['./kubesec', 'scan', file_path], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0 and result.stdout:
                kubesec_output = json.loads(result.stdout)
                
                # Convert kubesec results to SARIF findings
                if isinstance(kubesec_output, list):
                    for item in kubesec_output:
                        if 'scoring' in item and 'advise' in item:
                            for advice in item.get('advise', []):
                                sarif_results.append({
                                    "ruleId": f"kubesec/{advice.get('selector', 'unknown')}",
                                    "level": "warning" if advice.get('points', 0) < 0 else "note",
                                    "message": {"text": advice.get('reason', 'Security recommendation')},
                                    "locations": [{
                                        "physicalLocation": {
                                            "artifactLocation": {"uri": file_path},
                                            "region": {"startLine": 1}
                                        }
                                    }]
                                })
        except Exception as e:
            print(f"Error scanning {file_path}: {e}")
    
    # Update SARIF file with results
    with open('kubesec-results.sarif', 'r') as f:
        sarif = json.load(f)
    
    sarif["runs"][0]["results"] = sarif_results
    
    with open('kubesec-results.sarif', 'w') as f:
        json.dump(sarif, f, indent=2)
    
    print(f"Converted {len(sarif_results)} kubesec findings to SARIF")

run_kubesec_and_convert()
PYTHON_EOF
          
        else
          echo "No YAML files found to scan"
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"kubesec","version":"2.11.0"}},"results":[]}]}' > kubesec-results.sarif
        fi

    - name: Upload Kubesec SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: kubesec-results.sarif
        category: "Kubernetes Security - Kubesec"
        
    - name: Upload Kubesec Results as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: kubesec-results
        path: kubesec-results.sarif
        retention-days: 30

  container-security:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Extract Container Images
      id: extract-images
      run: |
        # Extract all container images from Kubernetes manifests
        images=$(grep -r "image:" apps/ --include="*.yaml" | grep -v "#" | sed 's/.*image: *//' | sed 's/[[:space:]]*$//' | sort -u)
        echo "Found images:"
        echo "$images"
        # Save for next step
        echo "$images" > images.txt

    - name: Run Trivy Security Scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        scan-type: 'config'
        scan-ref: './apps'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: "Container Security - Trivy"
        
    - name: Upload Trivy Results as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif
        retention-days: 30

  yaml-security:
    name: YAML Security Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install yamllint and sarif-om
      run: |
        pip install yamllint
        pip install sarif-om

    - name: Run yamllint with repo config
      continue-on-error: true
      run: |
        echo "Using repository .yamllint.yml configuration"
        cat .yamllint.yml
        echo "Running yamllint..."
        yamllint -c .yamllint.yml -f parsable apps/ > yamllint-output.txt || true
        
    - name: Convert yamllint to SARIF
      run: |
        python3 << 'EOF'
        import json
        import re
        from datetime import datetime
        
        def convert_yamllint_to_sarif():
            try:
                with open('yamllint-output.txt', 'r') as f:
                    lines = f.readlines()
            except FileNotFoundError:
                lines = []
            
            sarif = {
                "version": "2.1.0",
                "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                "runs": [{
                    "tool": {
                        "driver": {
                            "name": "yamllint",
                            "version": "1.0.0",
                            "informationUri": "https://yamllint.readthedocs.io/",
                            "rules": []
                        }
                    },
                    "results": []
                }]
            }
            
            rule_ids = set()
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                    
                # Parse yamllint output: file:line:column: [level] message (rule)
                match = re.match(r'^(.+?):(\d+):(\d+):\s*\[(\w+)\]\s*(.+?)\s*\((.+?)\)$', line)
                if match:
                    file_path, line_num, col_num, level, message, rule_id = match.groups()
                    
                    # Add rule if not seen before
                    if rule_id not in rule_ids:
                        rule_ids.add(rule_id)
                        sarif["runs"][0]["tool"]["driver"]["rules"].append({
                            "id": rule_id,
                            "name": rule_id,
                            "shortDescription": {"text": f"YAML lint rule: {rule_id}"},
                            "fullDescription": {"text": f"yamllint rule {rule_id}"},
                            "defaultConfiguration": {"level": "warning" if level == "warning" else "error"}
                        })
                    
                    # Add result
                    sarif["runs"][0]["results"].append({
                        "ruleId": rule_id,
                        "level": "warning" if level == "warning" else "error",
                        "message": {"text": message},
                        "locations": [{
                            "physicalLocation": {
                                "artifactLocation": {"uri": file_path},
                                "region": {
                                    "startLine": int(line_num),
                                    "startColumn": int(col_num)
                                }
                            }
                        }]
                    })
            
            with open('yamllint-results.sarif', 'w') as f:
                json.dump(sarif, f, indent=2)
                
            print(f"Converted {len(sarif['runs'][0]['results'])} yamllint issues to SARIF format")
        
        convert_yamllint_to_sarif()
        EOF
        
    - name: Upload yamllint SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: yamllint-results.sarif
        category: "YAML Lint - yamllint"
        
    - name: Upload yamllint Results as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: yamllint-results
        path: |
          yamllint-results.sarif
          yamllint-output.txt
        retention-days: 30
        
    - name: YAML Syntax Check
      continue-on-error: true
      run: |
        echo "Checking for critical YAML syntax errors..."
        find apps/ -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "Checking: $file"
          python3 -c "import yaml; yaml.safe_load(open('$file'))" || echo "⚠️ Syntax issue in $file"
        done

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [trufflehog, kubernetes-security, container-security, yaml-security]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All security findings are automatically uploaded to the **GitHub Security tab** for centralized review." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status | SARIF Upload |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| TruffleHog Secret Scan | ${{ needs.trufflehog.result }} | ✅ Security Tab |" >> $GITHUB_STEP_SUMMARY
        echo "| Kubernetes Security (Kubesec) | ${{ needs.kubernetes-security.result }} | ✅ Security Tab |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security (Trivy) | ${{ needs.container-security.result }} | ✅ Security Tab |" >> $GITHUB_STEP_SUMMARY
        echo "| YAML Lint (yamllint) | ${{ needs.yaml-security.result }} | ✅ Security Tab |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 How to Review Security Findings" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the **Security** tab in this repository" >> $GITHUB_STEP_SUMMARY
        echo "2. Click on **Code scanning alerts**" >> $GITHUB_STEP_SUMMARY
        echo "3. Filter by tool category:" >> $GITHUB_STEP_SUMMARY
        echo "   - **TruffleHog Secret Scan** - Potential secrets and credentials" >> $GITHUB_STEP_SUMMARY
        echo "   - **Kubernetes Security - Kubesec** - K8s security best practices" >> $GITHUB_STEP_SUMMARY
        echo "   - **Container Security - Trivy** - Container and configuration vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "   - **YAML Lint - yamllint** - YAML formatting and structure issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚨 Priority Actions" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.trufflehog.result }}" == "failure" ]]; then
          echo "- ⚠️ **CRITICAL**: Potential secrets detected! Review immediately." >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.kubernetes-security.result }}" == "failure" ]]; then
          echo "- ⚠️ **HIGH**: Kubernetes security issues found. Review cluster configs." >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.container-security.result }}" == "failure" ]]; then
          echo "- ⚠️ **MEDIUM**: Container security vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.yaml-security.result }}" == "failure" ]]; then
          echo "- ℹ️ **LOW**: YAML formatting issues - review for consistency." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan artifacts are also available in the workflow artifacts for 30 days.**" >> $GITHUB_STEP_SUMMARY