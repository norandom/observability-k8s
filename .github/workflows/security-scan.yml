name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scanning

    - name: Run TruffleHog
      continue-on-error: true
      run: |
        # Install TruffleHog to local directory
        mkdir -p ./bin
        DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest" | grep "browser_download_url.*linux-amd64.tar.gz" | cut -d '"' -f 4)
        curl -sSL "$DOWNLOAD_URL" | tar -xz -C ./bin
        chmod +x ./bin/trufflehog
        
        # Run scan with SARIF output format
        ./bin/trufflehog filesystem ./ --only-verified --format sarif > trufflehog-results.sarif || {
          # If SARIF format fails, create empty SARIF file
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"TruffleHog","version":"3.0.0","informationUri":"https://trufflesecurity.com/trufflehog"}},"results":[]}]}' > trufflehog-results.sarif
        }
        
        # Verify SARIF file exists and has content
        if [ -f trufflehog-results.sarif ]; then
          echo "TruffleHog SARIF created. File size: $(wc -c < trufflehog-results.sarif) bytes"
          echo "Content preview:"
          head -5 trufflehog-results.sarif
        else
          echo "TruffleHog SARIF file not created, creating empty one"
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"TruffleHog","version":"3.0.0","informationUri":"https://trufflesecurity.com/trufflehog"}},"results":[]}]}' > trufflehog-results.sarif
        fi
        
    - name: Upload TruffleHog SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trufflehog-results.sarif
        category: "TruffleHog Secret Scan"
        
    - name: Upload TruffleHog Results as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trufflehog-results
        path: trufflehog-results.sarif
        retention-days: 30


  container-security:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Extract Container Images
      id: extract-images
      run: |
        # Extract all container images from Kubernetes manifests
        images=$(grep -r "image:" apps/ --include="*.yaml" | grep -v "#" | sed 's/.*image: *//' | sed 's/[[:space:]]*$//' | sort -u)
        echo "Found images:"
        echo "$images"
        # Save for next step
        echo "$images" > images.txt

    - name: Run Trivy Security Scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        scan-type: 'config'
        scan-ref: './apps'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: "Container Security - Trivy"
        
    - name: Upload Trivy Results as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif
        retention-days: 30


  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [trufflehog, container-security]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All security findings are automatically uploaded to the **GitHub Security tab** for centralized review." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status | SARIF Upload |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| TruffleHog Secret Scan | ${{ needs.trufflehog.result }} | ✅ Security Tab |" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy Kubernetes Security | ${{ needs.container-security.result }} | ✅ Security Tab |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 How to Review Security Findings" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the **Security** tab in this repository" >> $GITHUB_STEP_SUMMARY
        echo "2. Click on **Code scanning alerts**" >> $GITHUB_STEP_SUMMARY
        echo "3. Filter by tool category:" >> $GITHUB_STEP_SUMMARY
        echo "   - **TruffleHog Secret Scan** - Potential secrets and credentials" >> $GITHUB_STEP_SUMMARY
        echo "   - **Container Security - Trivy** - Kubernetes configurations, container vulnerabilities, and security best practices" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚨 Priority Actions" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.trufflehog.result }}" == "failure" ]]; then
          echo "- ⚠️ **CRITICAL**: Potential secrets detected! Review immediately." >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.container-security.result }}" == "failure" ]]; then
          echo "- ⚠️ **HIGH**: Kubernetes security issues found. Review cluster configurations." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trivy scans Kubernetes manifests for security misconfigurations, making Kubesec redundant.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan artifacts are also available in the workflow artifacts for 30 days.**" >> $GITHUB_STEP_SUMMARY