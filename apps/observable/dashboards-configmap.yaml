apiVersion: v1
kind: ConfigMap
metadata:
  name: observable-dashboards
  namespace: observable
data:
  # This ConfigMap will be automatically updated by ArgoCD when you add new .md files
  # Place your dashboard .md files here and they will be available in the Observable Framework
  
  # Main dashboard (always present)
  index.md: |
    # Observability Dashboard
    
    Welcome to the comprehensive observability dashboard powered by Observable Framework with Python data analytics.
    
    ## System Overview
    
    ```js
    // Load real-time data from our APIs
    const lokiData = FileAttachment("data/loki-logs.json").json();
    const quickwitData = FileAttachment("data/quickwit-logs.json").json();
    const metricsData = FileAttachment("data/metrics.json").json();
    ```
    
    ## Quick Access
    
    <div class="service-grid">
    
    ### [üìä Grafana](http://grafana.k3s.local)
    Operational monitoring and dashboards
    - Time-series visualization
    - Alert management
    - Custom dashboards
    
    ### [üîç Quickwit](http://quickwit.k3s.local/ui/search)
    Security log analysis and search
    - Full-text search capabilities
    - Complex query support
    - Forensic analysis
    
    ### [üöÄ ArgoCD](http://argocd.k3s.local)
    GitOps deployment management
    - Application deployment status
    - Sync and health monitoring
    - Git-based configuration
    
    ### [üìù Loki](http://loki.k3s.local)
    Log aggregation API
    - Direct API access
    - LogQL queries
    - Real-time log streaming
    
    </div>
    
    ## Real-time Metrics
    
    ```js
    // Process and display log volume over time
    const logVolume = d3.rollup(
      [...lokiData, ...quickwitData],
      v => v.length,
      d => d3.timeHour(new Date(d.timestamp))
    );
    
    const volumeData = Array.from(logVolume, ([time, count]) => ({
      time: new Date(time),
      count,
      source: "combined"
    }));
    ```
    
    ```js
    Plot.plot({
      title: "Log Volume Over Time",
      width: 800,
      height: 300,
      x: {
        type: "time",
        label: "Time"
      },
      y: {
        label: "Log Count"
      },
      marks: [
        Plot.lineY(volumeData, {
          x: "time",
          y: "count",
          stroke: "#1f77b4",
          strokeWidth: 2
        }),
        Plot.dotY(volumeData, {
          x: "time",
          y: "count",
          fill: "#1f77b4",
          r: 3
        })
      ]
    })
    ```
    
    ## Data Sources Status
    
    <div class="status-grid">
    
    **Loki API**
    - Endpoint: `http://192.168.122.27:3100`
    - Status: ${lokiData.length > 0 ? "üü¢ Online" : "üî¥ Offline"}
    - Last Update: ${lokiData.length > 0 ? new Date(Math.max(...lokiData.map(d => d.timestamp))).toLocaleString() : "N/A"}
    
    **Quickwit API**
    - Endpoint: `http://192.168.122.27:7280`
    - Status: ${quickwitData.length > 0 ? "üü¢ Online" : "üî¥ Offline"}
    - Last Update: ${quickwitData.length > 0 ? new Date(Math.max(...quickwitData.map(d => d.timestamp))).toLocaleString() : "N/A"}
    
    **Prometheus**
    - Endpoint: `http://192.168.122.27:9090`
    - Status: ${metricsData ? "üü¢ Online" : "üî¥ Offline"}
    
    </div>
    
    ## Recent Log Activity
    
    ```js
    // Show recent logs from both sources
    const recentLogs = [...lokiData, ...quickwitData]
      .sort((a, b) => b.timestamp - a.timestamp)
      .slice(0, 20);
    ```
    
    ```js
    Inputs.table(recentLogs, {
      columns: [
        "timestamp",
        "source",
        "message",
        "severity",
        "service"
      ],
      header: {
        timestamp: "Time",
        source: "Source",
        message: "Message",
        severity: "Severity",
        service: "Service"
      },
      format: {
        timestamp: d => new Date(d).toLocaleString()
      },
      width: {
        timestamp: 150,
        source: 80,
        message: 400,
        severity: 80,
        service: 120
      }
    })
    ```
    
    ---
    
    *Dashboard last updated: ${new Date().toLocaleString()}*
  
  # Security dashboard
  security.md: |
    # Security Dashboard
    
    Real-time security event analysis using Quickwit logs.
    
    ```js
    const securityLogs = FileAttachment("data/quickwit-logs.json").json();
    ```
    
    ## Security Overview
    
    ```js
    const securityEvents = securityLogs.filter(d => d.is_security_relevant || d.risk_score > 3);
    const totalEvents = securityLogs.length;
    const securityEventCount = securityEvents.length;
    ```
    
    <div class="metric-grid">
      <div class="metric-card">
        <h3>Total Events</h3>
        <div class="metric-value">${totalEvents.toLocaleString()}</div>
      </div>
      <div class="metric-card">
        <h3>Security Events</h3>
        <div class="metric-value">${securityEventCount.toLocaleString()}</div>
      </div>
      <div class="metric-card">
        <h3>Security Rate</h3>
        <div class="metric-value">${totalEvents > 0 ? ((securityEventCount / totalEvents) * 100).toFixed(1) : 0}%</div>
      </div>
    </div>
    
    ## Risk Distribution
    
    ```js
    const riskData = d3.rollup(securityLogs, v => v.length, d => Math.floor(d.risk_score || 0));
    const riskArray = Array.from(riskData, ([score, count]) => ({risk_score: score, count}));
    ```
    
    ```js
    Plot.plot({
      title: "Risk Score Distribution",
      width: 600,
      height: 300,
      x: {label: "Risk Score", domain: [0, 10]},
      y: {label: "Event Count"},
      marks: [
        Plot.barY(riskArray, {
          x: "risk_score", 
          y: "count",
          fill: d => d.risk_score >= 7 ? "#dc3545" : d.risk_score >= 4 ? "#ffc107" : "#28a745"
        })
      ]
    })
    ```
    
    ## Recent Security Events
    
    ```js
    const recentSecurity = securityEvents.sort((a, b) => b.timestamp - a.timestamp).slice(0, 10);
    ```
    
    ```js
    Inputs.table(recentSecurity, {
      columns: ["timestamp", "severity", "category", "message", "source_ip"],
      format: {timestamp: d => new Date(d).toLocaleString()},
      width: {message: 300}
    })
    ```
  
  # Operations dashboard  
  operations.md: |
    # Operations Dashboard
    
    System performance and operational metrics analysis.
    
    ```js
    const operationalLogs = FileAttachment("data/loki-logs.json").json();
    const systemMetrics = FileAttachment("data/metrics.json").json();
    ```
    
    ## System Health
    
    ```js
    const metrics = systemMetrics?.system_metrics || {};
    const summary = systemMetrics?.summary || {};
    ```
    
    <div class="metric-grid">
      <div class="metric-card">
        <h3>System Health</h3>
        <div class="metric-value">${(summary.overall_health || 'unknown').toUpperCase()}</div>
      </div>
      <div class="metric-card">
        <h3>CPU Usage</h3>
        <div class="metric-value">${metrics.cpu_usage ? metrics.cpu_usage.toFixed(1) + '%' : 'N/A'}</div>
      </div>
      <div class="metric-card">
        <h3>Memory Usage</h3>
        <div class="metric-value">${metrics.memory_usage ? metrics.memory_usage.toFixed(1) + '%' : 'N/A'}</div>
      </div>
    </div>
    
    ## Log Levels
    
    ```js
    const logLevels = d3.rollup(operationalLogs, v => v.length, d => d.severity || d.level || "unknown");
    const levelArray = Array.from(logLevels, ([level, count]) => ({level, count}));
    ```
    
    ```js
    Plot.plot({
      title: "Log Distribution by Level",
      width: 500,
      height: 300,
      marks: [
        Plot.arc(levelArray, {
          theta: "count",
          fill: d => {
            switch(d.level.toLowerCase()) {
              case "error": return "#dc3545";
              case "warning": return "#ffc107";
              case "info": return "#17a2b8";
              default: return "#28a745";
            }
          }
        })
      ]
    })
    ```
    
    ## Service Activity
    
    ```js
    const serviceData = d3.rollup(
      operationalLogs.filter(d => d.service_name && d.service_name !== "unknown"),
      v => v.length,
      d => d.service_name
    );
    const topServices = Array.from(serviceData, ([service, count]) => ({service, count}))
      .sort((a, b) => b.count - a.count).slice(0, 10);
    ```
    
    ```js
    Inputs.table(topServices, {
      columns: ["service", "count"],
      header: {service: "Service", count: "Log Count"}
    })
    ```