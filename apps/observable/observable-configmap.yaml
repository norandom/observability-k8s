apiVersion: v1
kind: ConfigMap
metadata:
  name: observable-config
  namespace: observable
data:
  # Startup script
  start.sh: |
    #!/bin/sh
    set -e
    
    # Install required packages
    apk add --no-cache python3 py3-pip
    
    # Load environment variables
    if [ -f /config/cluster-endpoints.env ]; then
        . /config/cluster-endpoints.env
        export LOKI_ENDPOINT
        export QUICKWIT_ENDPOINT
        export PROMETHEUS_ENDPOINT
    fi
    
    # Install Python dependencies
    pip3 install requests
    
    # Install Observable Framework globally
    npm install -g @observablehq/framework@latest
    
    # Initialize Observable project if not exists
    cd /app
    if [ ! -f "package.json" ]; then
        echo "Initializing Observable Framework project..."
        npm init -y
        npm install @observablehq/framework
    fi
    
    # Create project structure
    mkdir -p src/data
    
    # Copy data loaders
    cp /config/loki-loader.py src/data/
    cp /config/quickwit-loader.py src/data/
    chmod +x src/data/*.py
    
    # Create config file
    cat > observablehq.config.js << 'EOFCONFIG'
export default {
  title: "Observability Dashboard",
  theme: "dashboard",
  sidebar: true,
  footer: "Built with Observable Framework"
};
EOFCONFIG
    
    # Create main index page
    cat > src/index.md << 'EOFINDEX'
# Observability Dashboard

Welcome to the Observability Dashboard powered by Observable Framework.

## Quick Links

- [Grafana](http://grafana.k3s.local) - Operational monitoring
- [Quickwit](http://quickwit.k3s.local/ui/search) - Security log search  
- [ArgoCD](http://argocd.k3s.local) - GitOps management

## Data Sources

This dashboard connects to:
- **Loki**: Operational logs and time-series data
- **Quickwit**: Security logs and full-text search
- **Prometheus**: Metrics and monitoring data

## Available Reports

Check the navigation sidebar for available analysis reports and dashboards.

---
*Dashboard powered by Observable Framework*
EOFINDEX
    
    # Start Observable Framework in development mode
    echo "Starting Observable Framework..."
    npx @observablehq/framework dev --host 0.0.0.0 --port 3000
  
  # Data loader configuration for Loki and Quickwit APIs
  cluster-endpoints.env: |
    CLUSTER_IP=192.168.122.27
    LOKI_ENDPOINT=http://192.168.122.27:3100
    QUICKWIT_ENDPOINT=http://192.168.122.27:7280
    PROMETHEUS_ENDPOINT=http://192.168.122.27:9090
  
  # Python data loader for Loki
  loki-loader.py: |
    #!/usr/bin/env python3
    import os
    import requests
    import json
    import sys
    from datetime import datetime, timedelta
    
    # Get cluster endpoints from environment
    LOKI_ENDPOINT = os.getenv('LOKI_ENDPOINT', 'http://192.168.122.27:3100')
    
    def fetch_loki_logs():
        """Fetch recent logs from Loki for Observable Framework"""
        try:
            # Query last hour of logs
            end_time = datetime.now()
            start_time = end_time - timedelta(hours=1)
            
            url = f"{LOKI_ENDPOINT}/loki/api/v1/query_range"
            params = {
                'query': '{job=~".+"}',
                'start': int(start_time.timestamp() * 1000000000),
                'end': int(end_time.timestamp() * 1000000000),
                'limit': 100
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                
                # Transform for Observable Framework
                logs = []
                if 'data' in data and 'result' in data['data']:
                    for stream in data['data']['result']:
                        labels = stream.get('stream', {})
                        for value in stream.get('values', []):
                            timestamp = int(value[0]) // 1000000  # Convert to milliseconds
                            message = value[1]
                            logs.append({
                                'timestamp': timestamp,
                                'message': message,
                                'labels': labels,
                                'source': 'loki'
                            })
                
                # Output as JSON for Observable
                print(json.dumps(logs, indent=2))
                
            else:
                print(json.dumps([]), file=sys.stderr)
                
        except Exception as e:
            print(f"Error fetching Loki logs: {e}", file=sys.stderr)
            print(json.dumps([]))
    
    if __name__ == "__main__":
        fetch_loki_logs()
  
  # Python data loader for Quickwit
  quickwit-loader.py: |
    #!/usr/bin/env python3
    import os
    import requests
    import json
    import sys
    from datetime import datetime, timedelta
    
    # Get cluster endpoints from environment
    QUICKWIT_ENDPOINT = os.getenv('QUICKWIT_ENDPOINT', 'http://192.168.122.27:7280')
    
    def fetch_quickwit_logs():
        """Fetch recent logs from Quickwit for Observable Framework"""
        try:
            url = f"{QUICKWIT_ENDPOINT}/api/v1/otel-logs-v0_7/search"
            
            # Query last hour of logs
            end_time = int(datetime.now().timestamp())
            start_time = int((datetime.now() - timedelta(hours=1)).timestamp())
            
            payload = {
                "query": "*",
                "max_hits": 100,
                "start_timestamp": start_time,
                "end_timestamp": end_time
            }
            
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                
                # Transform for Observable Framework
                logs = []
                if 'hits' in data:
                    for hit in data['hits']:
                        doc = hit.get('document', {})
                        logs.append({
                            'timestamp': doc.get('timestamp_nanos', 0) // 1000000,  # Convert to milliseconds
                            'message': doc.get('body', ''),
                            'severity': doc.get('severity_text', ''),
                            'service': doc.get('service_name', ''),
                            'source': 'quickwit',
                            'attributes': doc.get('attributes', {})
                        })
                
                # Output as JSON for Observable
                print(json.dumps(logs, indent=2))
                
            else:
                print(json.dumps([]), file=sys.stderr)
                
        except Exception as e:
            print(f"Error fetching Quickwit logs: {e}", file=sys.stderr)
            print(json.dumps([]))
    
    if __name__ == "__main__":
        fetch_quickwit_logs()