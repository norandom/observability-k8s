---
apiVersion: v1
kind: ConfigMap
metadata:
  name: observable-dashboards
  namespace: observable
data:
  index.md: |
    # üîç Observability Dashboard

    Welcome to the Observable Framework dashboard with conda Python environment support.

    ## üìä Dashboards

    ### **Available Dashboards:**
    - **[üè† Home](/)** - This main dashboard
    - **[üõ°Ô∏è Security](/security)** - Security analysis and threat monitoring
    - **[‚öôÔ∏è Operations](/operations)** - System performance and operational metrics

    ## üåê External Services

    ### **Monitoring & Analytics:**
    - **[üìä Grafana](http://grafana.k3s.local)** - Operational monitoring dashboards
    - **[üîç Quickwit](http://quickwit.k3s.local/ui/search)** - Security log search and analysis
    - **[üöÄ ArgoCD](http://argocd.k3s.local)** - GitOps deployment management
    - **[üìù Loki](http://loki.k3s.local)** - Log aggregation API

    ## üêç Python Environment

    This Observable Framework includes:
    - **Python 3.11** with conda environment
    - **polars & pandas** for high-performance data processing
    - **requests** for API integration
    - **matplotlib, seaborn, plotly** for visualization

    ## üì° Data Sources

    - **Loki API**: `http://192.168.122.27:3100` - Operational logs
    - **Quickwit API**: `http://192.168.122.27:7280` - Security logs
    - **Prometheus**: `http://192.168.122.27:9090` - System metrics

    ---

    *Built with Observable Framework + Conda ‚Ä¢ GitOps Enabled*

  security.md: |
    # Security Analysis Dashboard

    Real-time security event analysis using Quickwit logs and advanced Python analytics.

    ```js
    // Load security data from Quickwit API
    const quickwitEndpoint = "http://192.168.122.27:7280";

    // Sample security data for demonstration
    const securityLogs = [
      {
        timestamp: "2025-06-28T19:00:00Z",
        level: "warning",
        message: "Authentication attempt from unknown IP",
        is_security_relevant: true,
        source_ip: "192.168.1.100"
      },
      {
        timestamp: "2025-06-28T19:01:00Z",
        level: "info",
        message: "User login successful",
        is_security_relevant: false,
        user: "admin"
      },
      {
        timestamp: "2025-06-28T19:02:00Z",
        level: "error",
        message: "Failed login attempt",
        is_security_relevant: true,
        source_ip: "10.0.1.50"
      }
    ];
    ```

    ## Security Overview

    ```js
    const totalEvents = securityLogs.length;
    const securityEvents = securityLogs.filter(d => d.is_security_relevant);
    const securityEventCount = securityEvents.length;
    const securityPercentage = ((securityEventCount / totalEvents) * 100).toFixed(1);
    ```

    <div class="security-overview">
      <div class="metric-card">
        <h3>üö® Security Events</h3>
        <div class="metric-value">${securityEventCount}</div>
        <div class="metric-label">${securityPercentage}% of total events</div>
      </div>
      <div class="metric-card">
        <h3>üîç Total Logs</h3>
        <div class="metric-value">${totalEvents}</div>
        <div class="metric-label">Events analyzed</div>
      </div>
    </div>

    ## Recent Security Events

    <table>
      <thead>
        <tr>
          <th>Timestamp</th>
          <th>Level</th>
          <th>Message</th>
          <th>Source</th>
        </tr>
      </thead>
      <tbody>
        ${securityEvents.map(event => html`
          <tr>
            <td>${event.timestamp}</td>
            <td class="level-${event.level}">${event.level}</td>
            <td>${event.message}</td>
            <td>${event.source_ip || event.user || '-'}</td>
          </tr>
        `)}
      </tbody>
    </table>

    <style>
    .security-overview {
      display: flex;
      gap: 1rem;
      margin: 1rem 0;
    }
    .metric-card {
      background: #f8f9fa;
      padding: 1.5rem;
      border-radius: 8px;
      flex: 1;
      text-align: center;
      border-left: 4px solid #dc3545;
    }
    .metric-value {
      font-size: 2rem;
      font-weight: bold;
      color: #dc3545;
      margin: 0.5rem 0;
    }
    .metric-label {
      color: #6c757d;
      font-size: 0.9rem;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }
    th, td {
      padding: 0.5rem;
      text-align: left;
      border-bottom: 1px solid #dee2e6;
    }
    th {
      background-color: #f8f9fa;
      font-weight: bold;
    }
    .level-warning { color: #ffc107; font-weight: bold; }
    .level-error { color: #dc3545; font-weight: bold; }
    .level-info { color: #007bff; }
    </style>

  operations.md: |
    # Operational Insights Dashboard

    Advanced operational analytics using Loki logs and Prometheus metrics with Polars processing.

    ```js
    // Load operational data from APIs
    const lokiEndpoint = "http://192.168.122.27:3100";
    const prometheusEndpoint = "http://192.168.122.27:9090";

    // Sample operational data for demonstration
    const systemMetrics = {
      cpu_usage: "15%",
      memory_usage: "2.1GB",
      disk_usage: "45%",
      uptime: "5d 12h",
      requests_per_second: 127,
      error_rate: "0.1%"
    };

    const operationalLogs = [
      {
        timestamp: "2025-06-28T19:00:00Z",
        service: "nginx",
        level: "info",
        message: "Request processed successfully",
        response_time: "15ms"
      },
      {
        timestamp: "2025-06-28T19:01:00Z",
        service: "api",
        level: "info",
        message: "Database connection established",
        response_time: "5ms"
      },
      {
        timestamp: "2025-06-28T19:02:00Z",
        service: "worker",
        level: "warning",
        message: "High memory usage detected",
        response_time: "200ms"
      }
    ];
    ```

    ## System Health Overview

    <div class="health-overview">
      <div class="metric-card">
        <h3>üìä CPU Usage</h3>
        <div class="metric-value">${systemMetrics.cpu_usage}</div>
        <div class="metric-label">Current Load</div>
      </div>
      <div class="metric-card">
        <h3>üíæ Memory</h3>
        <div class="metric-value">${systemMetrics.memory_usage}</div>
        <div class="metric-label">Used Memory</div>
      </div>
      <div class="metric-card">
        <h3>‚ö° Requests</h3>
        <div class="metric-value">${systemMetrics.requests_per_second}</div>
        <div class="metric-label">per second</div>
      </div>
      <div class="metric-card">
        <h3>üìà Error Rate</h3>
        <div class="metric-value">${systemMetrics.error_rate}</div>
        <div class="metric-label">Current</div>
      </div>
    </div>

    ## Recent Operations

    <table>
      <thead>
        <tr>
          <th>Time</th>
          <th>Service</th>
          <th>Level</th>
          <th>Message</th>
          <th>Response Time</th>
        </tr>
      </thead>
      <tbody>
        ${operationalLogs.map(log => html`
          <tr>
            <td>${log.timestamp}</td>
            <td><span class="service-badge">${log.service}</span></td>
            <td class="level-${log.level}">${log.level}</td>
            <td>${log.message}</td>
            <td class="response-time">${log.response_time}</td>
          </tr>
        `)}
      </tbody>
    </table>

    <style>
    .health-overview {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin: 1rem 0;
    }
    .metric-card {
      background: #f8f9fa;
      padding: 1.5rem;
      border-radius: 8px;
      text-align: center;
      border-left: 4px solid #007bff;
    }
    .metric-value {
      font-size: 2rem;
      font-weight: bold;
      color: #007bff;
      margin: 0.5rem 0;
    }
    .metric-label {
      color: #6c757d;
      font-size: 0.9rem;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }
    th, td {
      padding: 0.75rem 0.5rem;
      text-align: left;
      border-bottom: 1px solid #dee2e6;
    }
    th {
      background-color: #f8f9fa;
      font-weight: bold;
    }
    .level-info { color: #007bff; }
    .level-warning { color: #ffc107; font-weight: bold; }
    .level-error { color: #dc3545; font-weight: bold; }
    .service-badge {
      background: #e9ecef;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.875rem;
      font-weight: 500;
    }
    .response-time {
      font-family: monospace;
      color: #495057;
    }
    </style>
