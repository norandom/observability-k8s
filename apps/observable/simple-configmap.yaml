---
apiVersion: v1
kind: ConfigMap
metadata:
  name: observable-config
  namespace: observable
data:
  start.sh: |
    #!/bin/sh
    set -e

    # Install system packages as root if needed
    if [ "$(id -u)" = "0" ]; then
        apk add --no-cache python3 py3-pip
        # Create app user if not exists
        addgroup -g 1001 -S observable 2>/dev/null || true
        adduser -S observable -u 1001 -G observable 2>/dev/null || true
        chown -R observable:observable /app
    fi

    # Install Python dependencies with system packages override
    pip3 install requests --break-system-packages

    # Setup project
    cd /app
    npm init -y
    npm install @observablehq/framework
    mkdir -p src/data
    cp /config/loki-loader.py src/data/
    cp /config/quickwit-loader.py src/data/
    cp /config/observablehq.config.js ./
    cp /config/index.md src/
    chmod +x src/data/*.py

    # Start the framework (use local installation)
    npx @observablehq/framework dev --host 0.0.0.0 --port 3000

  observablehq.config.js: |
    export default {
      title: "Observability Dashboard",
      theme: "dashboard",
      sidebar: true,
      footer: "Built with Observable Framework"
    };

  index.md: |
    # Observability Dashboard

    Welcome to the Observability Dashboard powered by Observable Framework.

    ## Quick Links

    - [Grafana](http://grafana.k3s.local) - Operational monitoring
    - [Quickwit](http://quickwit.k3s.local/ui/search) - Security log search
    - [ArgoCD](http://argocd.k3s.local) - GitOps management

    ## Data Sources

    This dashboard connects to:
    - **Loki**: Operational logs and time-series data
    - **Quickwit**: Security logs and full-text search
    - **Prometheus**: Metrics and monitoring data

    ---
    *Dashboard powered by Observable Framework*

  loki-loader.py: |
    #!/usr/bin/env python3
    import os
    import requests
    import json
    import sys
    from datetime import datetime, timedelta

    LOKI_ENDPOINT = os.getenv('LOKI_ENDPOINT', 'http://192.168.122.27:3100')

    def fetch_loki_logs():
        try:
            end_time = datetime.now()
            start_time = end_time - timedelta(hours=1)

            url = f"{LOKI_ENDPOINT}/loki/api/v1/query_range"
            params = {
                'query': '{job=~".+"}',
                'start': int(start_time.timestamp() * 1000000000),
                'end': int(end_time.timestamp() * 1000000000),
                'limit': 100
            }

            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                logs = []
                if 'data' in data and 'result' in data['data']:
                    for stream in data['data']['result']:
                        labels = stream.get('stream', {})
                        for value in stream.get('values', []):
                            timestamp = int(value[0]) // 1000000
                            message = value[1]
                            logs.append({
                                'timestamp': timestamp,
                                'message': message,
                                'labels': labels,
                                'source': 'loki'
                            })
                print(json.dumps(logs, indent=2))
            else:
                print(json.dumps([]))
        except Exception as e:
            print(f"Error fetching Loki logs: {e}", file=sys.stderr)
            print(json.dumps([]))

    if __name__ == "__main__":
        fetch_loki_logs()

  quickwit-loader.py: |
    #!/usr/bin/env python3
    import os
    import requests
    import json
    import sys
    from datetime import datetime, timedelta

    QUICKWIT_ENDPOINT = os.getenv('QUICKWIT_ENDPOINT', 'http://192.168.122.27:7280')

    def fetch_quickwit_logs():
        try:
            url = f"{QUICKWIT_ENDPOINT}/api/v1/otel-logs-v0_7/search"
            end_time = int(datetime.now().timestamp())
            start_time = int((datetime.now() - timedelta(hours=1)).timestamp())

            payload = {
                "query": "*",
                "max_hits": 100,
                "start_timestamp": start_time,
                "end_timestamp": end_time
            }

            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                logs = []
                if 'hits' in data:
                    for hit in data['hits']:
                        doc = hit.get('document', {})
                        logs.append({
                            'timestamp': doc.get('timestamp_nanos', 0) // 1000000,
                            'message': doc.get('body', ''),
                            'severity': doc.get('severity_text', ''),
                            'service': doc.get('service_name', ''),
                            'source': 'quickwit',
                            'attributes': doc.get('attributes', {})
                        })
                print(json.dumps(logs, indent=2))
            else:
                print(json.dumps([]))
        except Exception as e:
            print(f"Error fetching Quickwit logs: {e}", file=sys.stderr)
            print(json.dumps([]))

    if __name__ == "__main__":
        fetch_quickwit_logs()
