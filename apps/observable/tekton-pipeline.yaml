apiVersion: v1
kind: Namespace
metadata:
  name: tekton-pipelines
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-observable-image
  namespace: tekton-pipelines
spec:
  params:
  - name: git-url
    type: string
    description: Git repository URL
  - name: git-revision
    type: string
    description: Git revision to checkout
    default: "main"
  - name: image-url
    type: string
    description: Registry URL for the built image
  - name: external-image-url
    type: string
    description: External registry URL for deployment
  workspaces:
  - name: source
    description: Workspace for source code
  - name: dockerconfig
    description: Docker config for registry access
    optional: true
  steps:
  - name: git-clone
    image: alpine/git:latest
    script: |
      #!/bin/sh
      set -e
      echo "Cloning $(params.git-url) at $(params.git-revision)"
      git clone $(params.git-url) $(workspaces.source.path)/source
      cd $(workspaces.source.path)/source
      git checkout $(params.git-revision)
      ls -la apps/observable/
  
  - name: check-changes
    image: alpine/git:latest
    script: |
      #!/bin/sh
      set -e
      cd $(workspaces.source.path)/source/apps/observable
      
      # Only rebuild for infrastructure changes (not markdown dashboard changes)
      # Markdown files use live development with kubectl cp - no rebuild needed
      if git diff HEAD~1 --name-only | grep -E "(conda-environment\.yml|Dockerfile|requirements\.txt|package\.json)" > /dev/null; then
        echo "Container rebuild needed - infrastructure dependencies changed"
        echo "true" > /tmp/should-build
      else
        echo "false" > /tmp/should-build
        echo "No infrastructure changes detected - skipping rebuild"
        echo "Note: Markdown dashboard changes use live development (kubectl cp)"
      fi
      
  - name: build-and-push
    image: gcr.io/kaniko-project/executor:latest
    env:
    - name: DOCKER_CONFIG
      value: /kaniko/.docker
    script: |
      #!/busybox/sh
      set -e
      
      cd $(workspaces.source.path)/source/apps/observable
      
      echo "Building Observable Framework image..."
      echo "Source files:"
      ls -la
      
      echo "Building image $(params.image-url)"
      /kaniko/executor \
        --context=. \
        --dockerfile=./Dockerfile \
        --destination=$(params.image-url) \
        --destination=$(params.external-image-url) \
        --insecure \
        --skip-tls-verify
        
      echo "Image built and pushed successfully:"
      echo "  Internal: $(params.image-url)"
      echo "  External: $(params.external-image-url)"
    volumeMounts:
    - name: docker-config
      mountPath: /kaniko/.docker
      readOnly: true
  
  volumes:
  - name: docker-config
    emptyDir: {}
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: observable-gitops-pipeline
  namespace: tekton-pipelines
spec:
  params:
  - name: git-url
    type: string
    description: Git repository URL
  - name: git-revision
    type: string
    description: Git revision
    default: "main"
  - name: image-url
    type: string
    description: Image URL
    default: "registry.registry.svc.cluster.local:5000/observable-conda:latest"
  - name: external-image-url
    type: string
    description: External registry URL for updates
    default: "192.168.122.27:30500/observable-conda:latest"
  - name: deployment-namespace
    type: string
    description: Namespace for deployment
    default: "observable"
  
  workspaces:
  - name: shared-data
    description: Shared workspace
  
  tasks:
  - name: build-image
    taskRef:
      name: build-observable-image
    params:
    - name: git-url
      value: $(params.git-url)
    - name: git-revision
      value: $(params.git-revision)
    - name: image-url
      value: $(params.image-url)
    - name: external-image-url
      value: $(params.external-image-url)
    workspaces:
    - name: source
      workspace: shared-data
      
  - name: update-deployment
    runAfter: ["build-image"]
    taskSpec:
      params:
      - name: external-image-url
        type: string
      - name: deployment-namespace
        type: string
      steps:
      - name: update-and-restart
        image: bitnami/kubectl:latest
        script: |
          #!/bin/bash
          set -e
          
          # Update deployment image to use external registry URL
          echo "Updating deployment image to: $(params.external-image-url)"
          kubectl set image deployment/observable \
            observable=$(params.external-image-url) \
            -n $(params.deployment-namespace)
          
          # Wait for rollout to complete
          echo "Waiting for deployment rollout..."
          kubectl rollout status deployment/observable -n $(params.deployment-namespace) --timeout=300s
          
          # Show updated pod status
          echo "Deployment updated successfully!"
          kubectl get pods -n $(params.deployment-namespace) -l app=observable
    params:
    - name: external-image-url
      value: $(params.external-image-url)
    - name: deployment-namespace
      value: $(params.deployment-namespace)
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: observable-git-poller
  namespace: tekton-pipelines
spec:
  schedule: "*/2 * * * *"  # Every 2 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: git-poller
            image: bitnami/kubectl:latest
            env:
            - name: GIT_REPO_URL
              value: "https://github.com/norandom/observability-k8s.git"  # Update this
            - name: GIT_BRANCH
              value: "main"
            command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Checking for changes in Observable Framework..."
              
              # Install git
              apt-get update && apt-get install -y git
              
              # Clone repo to check for changes
              git clone --depth 2 $GIT_REPO_URL /tmp/repo
              cd /tmp/repo
              
              # Get latest commit hash
              LATEST_COMMIT=$(git rev-parse HEAD)
              echo "Latest commit: $LATEST_COMMIT"
              
              # Check if we've processed this commit already
              if kubectl get configmap observable-last-commit -n tekton-pipelines >/dev/null 2>&1; then
                LAST_PROCESSED=$(kubectl get configmap observable-last-commit -n tekton-pipelines -o jsonpath='{.data.commit}')
                echo "Last processed: $LAST_PROCESSED"
                
                if [ "$LATEST_COMMIT" = "$LAST_PROCESSED" ]; then
                  echo "No new commits, skipping..."
                  exit 0
                fi
              else
                echo "No previous commit record found, this is first run"
              fi
              
              # Check if changes are in observable directory
              if [ -n "$LAST_PROCESSED" ]; then
                CHANGED_FILES=$(git diff --name-only $LAST_PROCESSED HEAD)
              else
                CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
              fi
              
              echo "Changed files: $CHANGED_FILES"
              
              # Only trigger for infrastructure changes (not markdown dashboard changes)
              # Markdown files use live development with kubectl cp - no rebuild needed
              OBSERVABLE_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^apps/observable/(conda-environment\.yml|Dockerfile|requirements\.txt|package\.json|.*\.ya?ml)$" | grep -v "\.md$" || true)
              
              if [ -z "$OBSERVABLE_CHANGES" ]; then
                echo "No infrastructure changes detected"
                echo "Note: Markdown dashboard changes use live development (kubectl cp)"
                # Still update the commit tracking
                kubectl create configmap observable-last-commit --from-literal=commit=$LATEST_COMMIT -n tekton-pipelines --dry-run=client -o yaml | kubectl apply -f -
                exit 0
              fi
              
              echo "Infrastructure changes detected (requiring container rebuild):"
              echo "$OBSERVABLE_CHANGES"
              
              # Trigger pipeline
              echo "Triggering Observable Framework pipeline..."
              cat <<EOF | kubectl create -f -
              apiVersion: tekton.dev/v1beta1
              kind: PipelineRun
              metadata:
                generateName: observable-pipeline-run-
                namespace: tekton-pipelines
              spec:
                pipelineRef:
                  name: observable-gitops-pipeline
                params:
                - name: git-url
                  value: $GIT_REPO_URL
                - name: git-revision
                  value: $LATEST_COMMIT
                workspaces:
                - name: shared-data
                  volumeClaimTemplate:
                    spec:
                      accessModes:
                      - ReadWriteOnce
                      resources:
                        requests:
                          storage: 1Gi
              EOF
              
              # Update last processed commit
              kubectl create configmap observable-last-commit --from-literal=commit=$LATEST_COMMIT -n tekton-pipelines --dry-run=client -o yaml | kubectl apply -f -
              
              echo "Pipeline triggered for commit: $LATEST_COMMIT"
          restartPolicy: OnFailure
          serviceAccountName: tekton-triggers-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-triggers-sa
  namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tekton-triggers-minimal
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["tekton.dev"]
  resources: ["tasks", "taskruns", "pipelines", "pipelineruns"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-triggers-binding
subjects:
- kind: ServiceAccount
  name: tekton-triggers-sa
  namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-minimal
